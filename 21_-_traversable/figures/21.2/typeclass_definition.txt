class (Functor t, Foldable t) => Traversable (t :: * -> *) where
  traverse   :: Applicative f   =>   (a -> f b)  ->  t a  ->  f (t b)
  mapM       :: Monad m         =>   (a -> m b)  ->  t a  ->  m (t b)
  sequenceA  :: Applicative f   =>      t (f a)  ->  f (t a)
  sequence   :: Monad m         =>      t (m a)  ->  m (t a)
  {-# MINIMAL traverse | sequenceA #-}


instance Traversable []
instance Traversable Maybe
instance Traversable (Either a)
instance Traversable ((,) a)

-- The default class method definitions
traverse f = sequenceA . fmap f
sequenceA = traverse id

