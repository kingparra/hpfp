-- Compare these...
·∾ sum [1,2,3]
6

·∾ fmap sum [Just 1, Just 2, Just 3]
[1,2,3]

·∾ (fmap . fmap) sum Just [1,2,3]
Just 6

·∾ fmap sum (fmap Just [1,2,3])
[1,2,3]

·∾ fmap product [Just 1, Just 2, Nothing]
[1,2,1]


-- ...to these...
·∾ fmap Just [1,2,3]
[Just 1,Just 2,Just 3]

·∾ sequenceA $ fmap Just [1,2,3]
Just [1,2,3]

·∾ sequenceA [Just 1, Just 2, Just 3]
Just [1,2,3]

·∾ sequenceA [Just 1, Just 2, Nothing]
Nothing

·∾ fmap sum $ sequenceA [Just 1, Just 2, Just 3]
Just 6

·∾ fmap product (sequenceA [Just 1, Just 2, Nothing])
Nothing


-- It's worth mentioning that
-- Data.Maybe.catMaybes offers a different
-- way of handling a list of Maybe values...
·∾ import Data.Maybe

·∾ catMaybes [Just 1, Just 2, Just 3]
[1,2,3]

·∾ catMaybes [Just 1, Just 2, Nothing]
[1,2]

·∾ let xs = [Just 1, Just 2, Just 3, Nothing]

·∾ sum $ catMaybes xs
6

·∾ fmap sum $ sequenceA xs
Nothing

-- Using catMaybes allows you to sum (or
-- otherwise process) the list of Maybe values
-- even if there's potentially a Nothing value
-- lurking within.
