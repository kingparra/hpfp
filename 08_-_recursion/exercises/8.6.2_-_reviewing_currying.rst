8.6.2 Reviewing currying
^^^^^^^^^^^^^^^^^^^^^^^^
Given the following definitions, tell us what value results from further
applications.

   .. include:: exercises/8.6.2_-_reviewing_currying.rst.d/currying/src/Lib.hs
      :code:

1. What is the value of ``appedCatty "woohoo!"``? Try to determine the answer
   for yourself, then test in the REPL.

   Ok, desk-checking time::

     >>> appedCatty "woohoo!"
     >>> (cattyConny "woops") "woohoo!"
     >>> ((\x y -> x ++ " mrow " ++ y) "woops") "woohoo!"
     >>> (\y -> "woops" ++ " mrow" ++ y) "woohoo!"
     >>> "woops" ++ " mrow" ++ "woohoo!"
     >>> "woops mrowwoohoo!"

   My test looks like this:

   .. include:: exercises/8.6.2_-_reviewing_currying.rst.d/currying/test/Spec.hs
      :code:
      :start-after: describe "Question 1" $ do
      :end-before: describe "Question 2" $ do

   ...and here is what happens when I run it::

      $ pwd
      /home/chris/Projects/hpfp/08_-_recursion/exercises/8.6.2_-_reviewing_currying.rst.d/currying

      $ stack test --test-arguments='--match "Question 1"' --verbosity silent

      Question 1
        appended to the end

      Finished in 0.0003 seconds
      1 example, 0 failures

2. ``frappe "1"``

   Let me think about this::

     >>> frappe "1"
     >>> (flippy "haha") "1"
     >>> ((flip cattyConny) "haha") "1"
     >>> ((flip (\x y -> x ++ " mrow " ++ y)) "haha") "1"
     >>> ((\y x -> x ++ " mrow " ++ y) "haha") "1")
     >>> (\x -> x ++ " mrow " ++ "haha") "1"
     >>> "1" ++ " mrow " ++ "haha"
     >>> "1 mrow haha"

   Here's what my test looks like:

   .. include:: exercises/8.6.2_-_reviewing_currying.rst.d/currying/test/Spec.hs
      :code:
      :start-after: describe "Question 2" $ do
      :end-before: describe "Question 3" $ do

   Time to test::

     $ stack test --test-arguments='--match "Question 2"' --verbosity silent

     Question 2
       frappe "1" ==> "1 mrow haha"

     Finished in 0.0004 seconds
     1 example, 0 failures

3. ``frappe (appedCatty "2")``

   Unpacking indirection::

     >>> frappe (appedCatty "2")
     >>> frappe ((cattyConny "woops") "2")
     >>> frappe (((\x y -> x ++ " mrow " ++ y) "woops") "2")
     >>> (flippy "haha") (((\x y -> x ++ " mrow " ++ y) "woops") "2")
     >>> ((flip cattyConny) "haha") (((\x y -> x ++ " mrow " ++ y) "woops") "2")
     >>> ((flip (\x y -> x ++ " mrow " ++ y)) "haha") (((\x y -> x ++ " mrow " ++ y) "woops") "2")
     >>> ((\y x -> x ++ " mrow " ++ y) "haha") (((\x y -> x ++ " mrow " ++ y) "woops") "2")
     >>> (\x -> x ++ " mrow " ++ "haha") (((\x y -> x ++ " mrow " ++ y) "woops") "2")
     >>> (\x -> x ++ " mrow " ++ "haha") ((\y -> "woops" ++ " mrow " ++ y) "2")
     >>> (\x -> x ++ " mrow " ++ "haha") ("woops" ++ " mrow " ++ "2")
     >>> (\x -> x ++ " mrow " ++ "haha") "woops mrow 2"
     >>> "woops mrow 2" ++ " mrow " ++ "haha"
     >>> "woops mrow 2 mrow haha"

   Here is the test case:

   .. include:: exercises/8.6.2_-_reviewing_currying.rst.d/currying/test/Spec.hs
      :code:
      :start-after: describe "Question 3" $ do
      :end-before: describe "Question 4" $ do

   Now to test it out. I hope I didn't do all that typing for nothing::

     $ stack test --test-arguments='--match "Question 3"' --verbosity silent
     Progress 1/2: currying
     Question 3
       frappe (appedCatty "2") ==> "woops mrow 2 mrow haha"

     Finished in 0.0002 seconds
     1 example, 0 failures

   I should see if there is an editor plugin to replace functions with their
   definitions.

4. ``appedCatty (frappe "blue")``

   I'll try to do this one in my head. It should result in ``"woops mrow blue
   mrow haha"``? Maybe?

   No, I better write it out::

     >>> appedCatty (frappe "blue")
     >>> appedCatty ((flippy "haha") "blue")
     >>> appedCatty (((flip cattyConny) "haha") "blue")
     >>> appedCatty (((flip (\x y -> x ++ " mrow " ++ y) "haha") "blue")
     >>> appedCatty (((\y x -> x ++ " mrow " ++ y) "haha") "blue")
     >>> (cattyConny "woops") (((\y x -> x ++ " mrow " ++ y) "haha") "blue")
     >>> ((\x y -> x ++ " mrow " ++ y) "woops") (((\y x -> x ++ " mrow " ++ y) "haha") "blue")
     >>> (\y -> "woops" ++ " mrow " ++ y) (((\y x -> x ++ " mrow " ++ y) "haha") "blue")
     >>> (\y -> "woops" ++ " mrow " ++ y) ((\x -> x ++ " mrow " ++ "haha") "blue")
     >>> (\y -> "woops" ++ " mrow " ++ y) ("blue" ++ " mrow " ++ "haha")
     >>> (\y -> "woops" ++ " mrow " ++ y) "blue mrow haha"
     >>> "woops" ++ " mrow " ++ "blue mrow haha"
     >>> "woops mrow blue mrow haha"

   Here is the test case:

   .. include:: exercises/8.6.2_-_reviewing_currying.rst.d/currying/test/Spec.hs
      :code:
      :start-after: describe "Question 4" $ do
      :end-before: describe "Question 5" $ do

   Now to test it::

     $ stack test --test-arguments='--match "Question 4"' --verbosity silent
     Progress 1/2: currying
     Question 4
       appedCatty (frappe "blue") ==> "woops mrow blue mrow haha"

     Finished in 0.0004 seconds
     1 example, 0 failures

5. ``cattyConny (frappe "pink") (cattyConny "green" (appedCatty "blue"))``

   I'm getting tired, now, so I skipped a few steps::

     >>> cattyConny (frappe "pink") (cattyConny "green" (appedCatty "blue"))
     >>> (\y -> (frappe "pink") ++ " mrow " ++ y) (cattyConny "green" (appedCatty "blue"))
     >>> frappe "pink" ++ " mrow " ++ (cattyConny "green" (appedCatty "blue"))
     >>> frappe "pink" ++ " mrow " ++ ("green" ++ " mrow " ++ ("woops" ++ " mrow " ++  "blue"))
     >>> frappe "pink" ++ " mrow green mrow woops mrow blue"
     >>> (flippy "haha") "pink" ++ " mrow green mrow woops mrow blue"
     >>> ((flip cattyConny) "haha") "pink" ++ " mrow green mrow woops mrow blue"
     >>> (\x -> x ++ " mrow " ++ "haha") "pink" ++ " mrow green mrow woops mrow blue"
     >>> "pink" ++ " mrow " ++ "haha" ++ " mrow green mrow woops mrow blue"
     >>> "pink mrow haha mrow green mrow woops mrow blue"

   Here's the test case:

   .. include:: exercises/8.6.2_-_reviewing_currying.rst.d/currying/test/Spec.hs
      :code:
      :start-after: describe "Question 5" $ do
      :end-before: describe "Question 6" $ do

   Results of the test::

     $ stack test --test-arguments='--match "Question 5"' --verbosity silent
     Progress 1/2: currying
     Question 5
       cattyConny (frappe "pink") (cattyConny "green" (appedCatty "blue"))  ==>  "pink mrow haha mrow green mrow woops mrow blue"

     Finished in 0.0002 seconds
     1 example, 0 failures

6. ``cattyConny (flippy "Pugs" "are") "awesome"``

   Reduction::

     >>> cattyConny (flippy "Pugs" "are") "awesome"
     >>> (flippy "Pugs" "are") ++ " mrow " ++ "awesome"
     >>> ("are" ++ " mrow " ++ "Pugs") ++ " mrow " ++ "awesome"
     >>> "are mrow Pugs mrow awesome"

   Test case:

   .. include:: exercises/8.6.2_-_reviewing_currying.rst.d/currying/test/Spec.hs
      :code:
      :start-after: describe "Question 6" $ do

   Proof::

     $ stack test --test-arguments='--match "Question 6"' --verbosity silent

     Question 6
       cattyConny (flippy "Pugs" "are") "awesome" ==> "are mrow Pugs mrow awesome"

     Finished in 0.0007 seconds
     1 example, 0 failures
