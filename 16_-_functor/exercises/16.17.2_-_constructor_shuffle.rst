16.17.2 Constructor shuffle
^^^^^^^^^^^^^^^^^^^^^^^^^^^
Rearrange the arguments to the type constructor
of the datatype so the Functor instance works.

1.
   ::

     data Sum a b = First a | Second b

     instance Functor (Sum e) where
       fmap f (First a)  =  First (f a)
       fmap f (Second b) =  Second b

   It compiles!

   .. include:: exercises/16.17.2_-_constructor_shuffle.rst.d/constructor-shuffle/src/Lib.hs
      :code:
      :start-after: -- Question 1
      :end-before: -- Question 2

2.
   ::

     data Company a b c = DeepBlue a c | Something b

     instance Functor (Company e e') where
       fmap f (Something b)  =  Something (f b)
       fmap _ (DeepBlue a c) =  DeepBlue a c

   I don't know why this works, but it does.

   .. include:: exercises/16.17.2_-_constructor_shuffle.rst.d/constructor-shuffle/src/Lib.hs
      :code:
      :start-after: -- Question 2
      :end-before: -- Question 3

3.
   ::

     data More a b = L a b a | R b a b deriving (Eq, Show)

     instance Functor (More x) where
       fmap f (L a b a')  =  L (f a) b (f a')
       fmap f (R b a b')  =  R b (f a) b'

   Keeping in mind that it should result in a ``Functor``
   that does the following::

     ·∾ fmap (+1) (L 1 2 3)
     L 2 2 4

     ·∾ fmap (+1) (R 1 2 3)
     R 1 3 3

   .. include:: exercises/16.17.2_-_constructor_shuffle.rst.d/constructor-shuffle/src/Lib.hs
      :code:
      :start-after: -- Question 3

   .. include:: exercises/16.17.2_-_constructor-shuffle.rst.d/constructor_shuffle/test/Spec.hs
      :code:
