15.15.1 Semigroup exercises
^^^^^^^^^^^^^^^^^^^^^^^^^^^
**Given a datatype, implement the Semigroup instance.** Add
``Semigroup`` constraints to type variables where needed.
Use the ``Semigroup`` class from the ``semigroups`` library
(or from ``base`` if you are on GHC 8) or write your own.
When we use ``(<>)``, we mean the infix ``mappend`` from the
``Semigroup`` typeclass.

**Note** We're not always going to derive every instance you
may want or need in the datatypes we provide for exercises.
We expect you to know what you need and to take care of it
yourself by this point.

1. Validate all of your instances with QuickCheck. Since
   ``Semigroup``'s only law is associativity, that's the
   only property you need to reuse. Keep in mind that you'll
   potentially need to import the modules for ``Monoid`` and
   ``Semigroup`` and to avoid naming conflicts for the
   ``(<>)`` depending on your version of GHC.

   ::

     data Trivial = Trivial deriving (Eq, Show)

     instance Semigroup Trivial where
       _ <> _ = undefined

     instance Arbitrary Trivial where
       arbitrary = return Trivial

     semigroupAssoc :: (Eq m, Semigroup m)
                    => m -> m -> m -> Bool
     semigroupAssoc a b c =
       a <> (b <> c) == (a <> b) <> c

     type TrivAssoc = Trivial -> Trivial -> Trivial -> Bool

     main :: IO ()
     main = quickCheck (semigroupAssoc :: TrivAssoc)

   Ok, I've restructured things a bit, but here is an
   implementation of ``arbitrary`` for ``Trivial``, as well
   as instance of ``Monoid`` for ``Trivial``.

   .. include:: exercises/15.15.1_-_semigroup_exercises.rst.d/semigroup-exercises/src/Lib.hs
      :code:
      :start-after: -- Question 1
      :end-before: -- Question 2

   Here are the tests, moved to a separate module:

   .. include:: exercises/15.15.1_-_semigroup_exercises.rst.d/semigroup-exercises/test/Spec.hs
      :code:
      :start-after: -- Question 1
      :end-before: -- Question 2

   .. This one was confusing, since I didn't know how
   .. to write a QuickCheck generator. Working through
   .. it with Hyiltiz's help was really beneficial.

2. ``newtype Identity a = Identity a``

   Ok, here is an instance:

   .. include:: exercises/15.15.1_-_semigroup_exercises.rst.d/semigroup-exercises/src/Lib.hs
      :code:
      :start-after: -- Question 2
      :end-before: -- Question 3

   and here is the test:

   .. include:: exercises/15.15.1_-_semigroup_exercises.rst.d/semigroup-exercises/test/Spec.hs
      :code:
      :start-after: -- Question 2
      :end-before: -- Question 3

3. ``data Two a b = Two a b``

   **Hint** Ask for another Semigroup instance.

4. ``data Three a b c = Three a b c``
5. ``data Four a b c d = Four a b c d``
6. ``newtype BoolConj = BoolConj Bool``

   What it should do::

     ·∾ (BoolConj True) <> (BoolConj True)
     BoolConj True

     ·∾ (BoolConj True) <> (BoolConj False)
     BoolConj False

7. ``newtype BoolDisj = BoolDisj Bool``

   What it should do::

     ·∾ (BoolDisj True) <> (BoolDisj True)
     BoolDisj True

     ·∾ (BoolDisj True) <> (BoolDisj False)
     BoolDisj True

8. ``data Or a b = Fst a | Snd b``

   The ``Semigroup`` for ``Or`` should have the following
   behavior. We can think of this as having a "sticky"
   ``Snd`` value where it'll hold onto the first ``Snd``
   value when and if one is passed as an argument. This is
   similar to the ``First'`` ``Monoid`` you wrote earlier.

   ::

     ·∾ Fst 1 <> Snd 2
     Snd 2

     ·∾ Fst 1 <> Fst 2
     Fst 2

     ·∾ Snd 1 <> Fst 2
     Snd 1

     ·∾ Snd 1 <> Snd 2
     Snd 1

9. ``newtype Combine a b = Combine { unCombine :: (a -> b) }``

   What it should do::

     ·∾  let f = Combine $ \n -> Sum (n + 1)
     ·∾  let g = Combine $ \n -> Sum (n - 1)

     ·∾  unCombine (f <> g) $ 0
     Sum {getSum = 0}

     ·∾  unCombine (f <> g) $ 1
     Sum {getSum = 2}

     ·∾  unCombine (f <> f) $ 1
     Sum {getSum = 4}

     ·∾  unCombine (g <> f) $ 1
     Sum {getSum = 2}

   **Hint** This function will eventually be applied to a
   single value of type *a*. But you'll have multiple functions
   that can produce a value of type *b*. How do we combine
   multiple values so we have a single *b*? This one will
   probably be tricky! Remember that the type of the value
   inside of Combine is that of a function. The type of
   functions should already have an Arbitrary instance that
   you can reuse for testing this instance.

10. ``newtype Comp a = Comp { unComp :: (a -> a) }``

    **Hint** We can do something that seems a little more
    specific and natural to functions now that the input and
    output types are the same.

11. Look familiar?
    ::

      data Validation a b =
        Failure a | Success b deriving (Eq, Show)

      instance Semigroup a => Semigroup (Validation a b) where
        (<>) = undefined

    Given this code::

      main = do
        let failure :: String -> Validation String Int
            failure = Failure
            success :: Int -> Validation String Int
            success = Success
        print $ success 1 <> failure "blah"
        print $ failure "woot" <> failure "blah"
        print $ success 1 <> success 2
        print $ failure "woot" <> success 2

    You should get this output::

      ·∾  main
      Success 1
      Failure "wootblah"
      Success 1
      Success 2
