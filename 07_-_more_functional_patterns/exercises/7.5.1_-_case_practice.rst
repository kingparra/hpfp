7.5.1 Exercises: Case Practice
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
First, rewrite if-then-else expressions into case expressions.

1. The following should return ``x`` when ``x`` is greater
   than ``y``::

     functionC x y = if x > y then x else y

   Rewritten::

     functionC x y =
       case x > y of
         True  -> x
         False -> y

   Proof it works::

     ·∾ functionC x y = case x > y of { True -> x; False -> y }
     ·∾ functionC 3 8
     8
     ·∾ functionC 8 3
     8
     ·∾ functionC 1 9
     9
     ·∾ functionC 9 1
     9
     ·∾ functionC 10 1
     10

2. The following will add ``2`` to even numbers and otherwise
   simply return the input value::

     ifEvenAdd2 n = if even n then (n+2) else n

   Rewritten::

     ifEvenAdd2 n = case even n of { True -> n+2; False -> n }

   Proof it works::

     ·∾ ifEvenAdd2 n = if even n then n+2 else n
     ·∾ ifEvenAdd2 2
     4
     ·∾ ifEvenAdd2 8
     10
     ·∾ ifEvenAdd2 9
     9

     ·∾ ifEvenAdd2 n = case even n of { True -> n+2; False -> n }
     ·∾ ifEvenAdd2 2
     4
     ·∾ ifEvenAdd2 8
     10
     ·∾ ifEvenAdd2 9
     9

   The next exercise doesn't have all the cases covered. See if
   you can fix it.

3. The following compares a value, ``x``, to zero and returns an
   indicator for whether ``x`` is a positive number or negative
   number. What if ``x`` is ``0``?

   You may need to play with the compare function a bit to find
   what to do::

     nums :: Num x => x -> Ordering
     nums x =
       case compare x 0 of
         LT -> -1
         GT ->  1

   Rewritten::

     nums :: Num x => x -> Ordering
     nums x =
       case compare x 0 of
         LT -> -1
         GT ->  1
         EQ ->  0

   Proof it works::

     ·∾ nums x = case compare x 0 of { LT -> -1; GT -> 1; EQ -> 0; }
     ·∾ nums 0
     0
     ·∾ nums 8
     1
     ·∾ nums (-9000)
     -1
