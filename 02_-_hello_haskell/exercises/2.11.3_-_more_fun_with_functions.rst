2.11.3 More fun with functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Here is a bit of code as it might be entered into a source file. Remember
that when you write code in a source file, the order is unimportant, but when
writing code directly into the REPL the order does matter. Given that, look at
this code and rewrite it such that it could be evaluated in the REPL (remember:
you may need let when entering it directly into the REPL). Be sure to enter
your code into the REPL to make sure it evaluates correctly.::

    z = 7
    x = y ^ 2
    waxOn = x * 5
    y = z + 8

    -- becomes
    z = 7
    y = z + 8
    x = y ^ 2
    waxOn = x * 5

All the answers in one screen cast, the answer to 4 has a correction below.

.. raw:: html

   <script id="asciicast-vqSq4yFyz5bNjfTKobtadDlFn"
   src="https://asciinema.org/a/vqSq4yFyz5bNjfTKobtadDlFn.js"
   async></script>

1. Now you have a value called waxOn in your REPL. What do you think will
   happen if you enter::

     10 + waxOn
     -- or
     (+10) waxOn
     -- or
     (-) 15 waxOn
     -- or
     (-) waxOn 15

   This::

     Prelude> z = 7; y = z + 8; x = y ^ 2; waxOn = x * 5
     Prelude> waxOn
     1125
     Prelude> 10 + waxOn
     1135
     Prelude> (+10) waxOn
     1135
     Prelude> (-) 15 waxOn
     -1110
     Prelude> (-) waxOn 15
     1110

2. Earlier we looked at a function called triple. While your REPL has waxOn in
   session, re-enter the triple function at the prompt::

     triple x = x * 3

3. Now, what will happen if we enter this at our GHCi prompt?  What do you
   think will happen first, considering what role waxOn is playing in this
   function call? Then enter it, see what does happen, and check your
   understanding::

     triple waxOn

   Sure, here::

     Prelude> triple x = x * 3
     Prelude> x
     225
     Prelude> triple waxOn
     3375

4. Rewrite waxOn as an expression with a where clause in your source file. Load
   it into your REPL and make sure it still works as expected.

   You mean a decalartion, right?::

     ·∾ :{
      ⋮ waxOn = x * 5
      ⋮   where z = 7
      ⋮         y = z + 8
      ⋮         x = y ^ 2
      ⋮ :}
     ·∾ waxOn
     1125

   No, wait, I got that wrong::

     ·∾ :{
      ⋮ let waxOn = x * 5
      ⋮       where z = 7; y = z + 8; x = y ^ 2
      ⋮ in  waxOn
      ⋮ :}
     1125
     ·∾

5. To the same source file where you have waxOn, add the triple function.
   Remember: You don’t need let and the function name should be at the left
   margin (that is, not nested as one of the waxOn expressions). Make sure it
   works by loading it into your REPL and then entering triple waxOn again at
   the REPL prompt.  You should have the same answer as you did above.

6. Now, without changing what you’ve done so far in that file, add a new
   function called waxOff that looks like this::

     waxOff x = triple x

7. Load the source file into your REPL and enter waxOff waxOn at the prompt.
   You now have a function, waxOff that can be applied to a variety of
   arguments — not just waxOn but any (numeric) value you want to put in for x.
   Play with that a bit. What is the result of waxOff 10 or waxOff (-50)? ::

     *WaxOn> waxOff 10
     30
     *WaxOn> waxOff (-50)
     -150
     *WaxOn>

   Try modifying your waxOff function to do something new — perhaps you want to
   first triple the x value and then square it or divide it by 10. Spend some
   time getting comfortable with modifying the source file code, reloading it,
   and checking your modification in the REPL.
