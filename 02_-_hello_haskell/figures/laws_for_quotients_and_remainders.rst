::

  ·∾ --  (x `quot` y) * y  +  (x `rem` y) == x 
  ·∾ --   (x `div` y) * y  +  (x `mod` y) == x

  ·∾ :{
  ·∾ let x = 10; y = (-4) in
  ·∾     (x `quot` y) * y    +  (x `rem` y)    == x
  ·∾ --
  ·∾ --  (10 `quot` (-4)) * (-4) + (10 `rem` (-4)) == 10
  ·∾ --              (-2) * (-4) +  2              == 10
  ·∾ --                       8  +  2              == 10
  ·∾ --                            10              == 10
  ·∾ --
  ·∾ :}
  True

  ·∾ :{
  ·∾ let x = 10; y = (-4) in
  ·∾         (x `div` y) *  y   +  (x `mod` y)    == x
  ·∾ --
  ·∾ --  (10 `div` (-4)) * (-4) + (10 `mod` (-4)) == 10
  ·∾ --             (-3) * (-4) + (-2)            == 10
  ·∾ --                     12  + (-2)            == 10
  ·∾ --                         10                == 10
  ·∾ --
  ·∾ :}
  True
