12.5.5 Small library for Maybe
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Write the following functions. This may take some time.

1. Simple boolean checks for Maybe values.

   Function stub::

     isJust :: Maybe a -> Bool

   GHCi session::

     ·∾  isJust (Just 1)
     True

     ·∾  isJust Nothing
     False

   Function stub::

     isNothing :: Maybe a -> Bool

   GHCi session::

     ·∾  isNothing (Just 1)
     False

     ·∾  isNothing Nothing
     True

   Here is my attempt:

   .. include:: exercises/12.5.5_-_small_library_for_maybe.rst.d/small-library-for-maybe/src/Lib.hs
      :code:
      :start-after: -- Question 1
      :end-before: -- Question 2

2. The following is the Maybe catamorphism. You can turn a Maybe value into
   anything else with this.

   Function stub::

     mayybee :: b -> (a -> b) -> Maybe a -> b

   Examples of its use::

     ·∾  mayybee 0 (+1) Nothing
     0

     ·∾  mayybee 0 (+1) (Just 1)
     2

   Here is my attempt:

   .. include:: exercises/12.5.5_-_small_library_for_maybe.rst.d/small-library-for-maybe/src/Lib.hs
      :code:
      :start-after: -- Question 2
      :end-before: -- Question 3

3. In case you just want to provide a fallback value.

   Function stub::

     -- Try writing it in terms of the maybe catamorphism
     fromMaybe :: a -> Maybe a -> a

   Example usage::

     ·∾  fromMaybe 0 Nothing
     0

     ·∾  fromMaybe 0 (Just 1)
     1

   Here is my attempt:

   .. include:: exercises/12.5.5_-_small_library_for_maybe.rst.d/small-library-for-maybe/src/Lib.hs
      :code:
      :start-after: -- Question 3
      :end-before: -- Question 4

4. Converting between List and Maybe.

   Stub::

     listToMaybe :: [a] -> Maybe a

   Usage::

     ·∾  listToMaybe [1, 2, 3]
     Just 1

     ·∾  listToMaybe []
     Nothing

   Stub::

     maybeToList :: Maybe a -> [a]

   Usage of ``maybeToList``::

     ·∾  maybeToList (Just 1)
     [1]

     ·∾  maybeToList Nothing
     []

   Here is my attempt:

   .. include:: exercises/12.5.5_-_small_library_for_maybe.rst.d/small-library-for-maybe/src/Lib.hs
      :code:
      :start-after: -- Question 4
      :end-before: -- Question 5

5. For when we want to drop the Nothing values from our list.

   Stub::

     catMaybes :: [Maybe a] -> [a]

   Usage::

     ·∾  catMaybes [Just 1, Nothing, Just 2]
     [1, 2]

     ·∾  let xs = take 3 $ repeat Nothing

     ·∾  catMaybes xs
     []

   Here is my attempt:

   .. include:: exercises/12.5.5_-_small_library_for_maybe.rst.d/small-library-for-maybe/src/Lib.hs
      :code:
      :start-after: -- Question 5
      :end-before: -- Question 6

6. You'll see this called "sequence" later.

   Stub::

     flipMaybe :: [Maybe a] -> Maybe [a]

   Usage::

     ·∾  flipMaybe [Just 1, Just 2, Just 3]
     Just [1, 2, 3]

     ·∾  flipMaybe [Just 1, Nothing, Just 3]
     Nothing

   Here is my attempt:

   .. include:: exercises/12.5.5_-_small_library_for_maybe.rst.d/small-library-for-maybe/src/Lib.hs
      :code:
      :start-after: -- Question 6
