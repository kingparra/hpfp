12.5.4 It's only Natural
^^^^^^^^^^^^^^^^^^^^^^^^
You'll be presented with a datatype to represent
the natural numbers. The only values representable
with the naturals are whole numbers from zero to
infinity.

Your task will be to implement functions to
convert Naturals to Integers and Integers to
Naturals.

Any Natural can be represented by an Integer, but
the same is not true of any Integer. Negative
numbers are not valid natural numbers.

The conversion from Naturals to Integers won't
return Maybe because Integer is a strict superset
of Natural.

First, the datatype::

  data Nat = Zero | Succ Nat
    deriving (Eq, Show)

Here is a stub for ``natToInteger``::

  natToInteger :: Nat -> Integer
  natToInteger = undefined

Along with it's expected output::

  ·∾ natToInteger Zero
  0

  ·∾ natToInteger (Succ Zero)
  1

  ·∾ natToInteger (Succ (Succ Zero))
  2

A function to convert integers to Nats::

  integerToNat :: Integer -> Maybe Nat
  integerToNat = undefined

Example output::

  ·∾  integerToNat 0
  Just Zero

  ·∾  integerToNat 1
  Just (Succ Zero)

  ·∾  integerToNat 2
  Just (Succ (Succ Zero))

  ·∾  integerToNat (-1)
  Nothing

Ok, here is my attempt.

.. include:: exercises/12.5.4_-_its_only_natural.rst.d/its-only-natural/src/Lib.hs
   :code:
