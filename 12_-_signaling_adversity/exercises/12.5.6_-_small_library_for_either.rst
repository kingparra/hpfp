12.5.6 Small library for Either
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Write each of the following functions. If more than one possible unique function
exists for the type, use common sense to determine what it should do.

1. Try to eventually arrive at a solution that uses ``foldr``, even if earlier
   versions don't use ``foldr``.

   ::

     lefts' :: [Either a b] -> [a]

2. Same as the last one. Use ``foldr`` eventually.

   ::

     rights' :: [Either a b] -> [b]

3. ``partitionEithers' :: [Either a b] -> ([a], [b])``

4. ``eitherMaybe' :: (b -> c) -> Either a b -> Maybe c``

5. This is a general catamorphism for ``Either`` values.

   ::

     either' :: (a -> c) -> (b -> c) -> Either a b -> c

6. Same as before, but use the ``either'`` function you just wrote.

   ::

     eitherMaybe'' :: (b -> c) -> Either a b -> Maybe c

Most of the functions you just saw are in the ``Prelude``, ``Data.Maybe``, or
``Data.Either`` but you should strive to write them yourself without looking at
existing implementations. You will deprive yourself if you cheat.
