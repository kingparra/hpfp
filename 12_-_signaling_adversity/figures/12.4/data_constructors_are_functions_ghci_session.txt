·∾ -- 12.4.2 Data constructors are functions, page 475
·∾ data Trivial = Trivial deriving Show
·∾ Trivial 1

<interactive>:79:1: error:
    • Couldn't match expected type ‘Integer -> t’
                  with actual type ‘Trivial’
    • The function ‘Trivial’ is applied to one argument,
      but its type ‘Trivial’ has none
      In the expression: Trivial 1
      In an equation for ‘it’: it = Trivial 1
    • Relevant bindings include it :: t (bound at <interactive>:79:1)
·∾
·∾ data UnaryC = UnaryC Int deriving Show
·∾ :type UnaryC
UnaryC :: Int -> UnaryC
·∾ UnaryC 10
UnaryC 10
·∾ :type UnaryC 10
UnaryC 10 :: UnaryC
·∾ -- page 476
·∾ UnaryC "blah"

<interactive>:86:8: error:
    • Couldn't match expected type ‘Int’ with actual type ‘[Char]’
    • In the first argument of ‘UnaryC’, namely ‘"blah"’
      In the expression: UnaryC "blah"
      In an equation for ‘it’: it = UnaryC "blah"
·∾ data Unary a = Unary a deriving Show
·∾ :type Unary
Unary :: a -> Unary a
·∾ :type Unary 10
Unary 10 :: Num a => Unary a
·∾ :type Unary "blah"
Unary "blah" :: Unary [Char]
·∾
·∾ :info Unary
data Unary a = Unary a  -- Defined at <interactive>:87:1
instance [safe] Show a => Show (Unary a)
  -- Defined at <interactive>:87:33
·∾ :type (Unary id)
(Unary id) :: Unary (a -> a)
·∾ show (Unary id)

<interactive>:94:1: error:
    • No instance for (Show (a0 -> a0)) arising from a use of ‘show’
        (maybe you haven't applied a function to enough arguments?)
    • In the expression: show (Unary id)
      In an equation for ‘it’: it = show (Unary id)
·∾ fmap Just [1,2,3]
[Just 1,Just 2,Just 3]
