18.7.2 Functions in terms of
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Write the following functions using the
methods provided by Monad and Functor. Using
stuff like identity and composition is fine,
but it has to typecheck with types provided.

1. ``j :: Monad m => m (m a) -> m a``

   Expecting the following behavior::

     Prelude> j [[1, 2], [], [3]]
     [1,2,3]

     Prelude> j (Just (Just 1))
     Just 1

     Prelude> j (Just Nothing)
     Nothing

     Prelude> j Nothing
     Nothing

2. ``l1 :: Monad m => (a -> b) -> m a -> m b``
3. ``l2 :: Monad m => (a -> b -> c) -> m a -> m b -> m c``
4. ``a :: Monad m => m a -> m (a -> b) -> m b``
5. You'll need recursion for this one. ::

    meh :: Monad m => [a] -> (a -> m b) -> m [b]

6. Hint: reuse ``meh``

    flipType :: (Monad m) => [m a] -> m [a]
