·∾ import Control.Monad
·∾ :set -XTypeApplications

·∾ :{
 ⋮ fmap' :: Functor f => (a -> f b) -> f a -> f (f b)
 ⋮ fmap' = fmap
 ⋮ :}
·∾

·∾ andOne x = [x,1]
·∾ andOne 10
[10,1]

·∾ :type fmap andOne [4,5,6]
fmap andOne [4,5,6] :: Num a => [[a]]

·∾ fmap andOne [4,5,6]
[[4,1],[5,1],[6,1]]

·∾ concat $ fmap andOne [4,5,6]
[4,1,5,1,6,1]

·∾ :type join
join :: Monad m => m (m a) -> m a

·∾ :type concat @[]
concat @[] :: [[a]] -> [a]

·∾ :type join @[]
join @[] :: [[a]] -> [a]
