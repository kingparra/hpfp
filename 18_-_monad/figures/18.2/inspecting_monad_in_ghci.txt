·∾ import Control.Monad



·∾ :doc Monad

    The Monad class defines the basic
    operations over a monad, a concept
    from a branch of mathematics known as
    category theory. From the perspective
    of a Haskell programmer, however, it
    is best to think of a monad as an
    abstract datatype of actions.

    Haskells do expressions provide a
    convenient syntax for writing monadic
    expressions.

    Instances of Monad should satisfy the
    following laws:

    [Left identity]

              return a >>= k
                    =
                   k a

    [Right identity]

               m >>= return
                    =
                    m

    [Associativity]

         m >>= (\x -> (k x >>= h))
                    =
             (m >>= k) >>= h

    Furthermore, the Monad and Applicative
    operations should relate as follows:

             pure   =   return

             (<*>)  =   ap

    The above laws imply:

         fmap f xs  =  xs >>= return . f

              (>>)  =  (*>)

    and that pure and (<*>) satisfy the
    applicative functor laws.

    The instances of Monad for lists,
    Data.Maybe.Maybe and System.IO.IO
    defined in the "Prelude" satisfy
    these laws.



·∾ :info Monad

    class Applicative m => Monad (m :: * -> *) where
      (>>=)  :: m a -> (a -> m b) -> m b
      (>>)   :: m a ->    m b     -> m b
      return :: a   ->    m a
      {-# MINIMAL (>>=) #-}

    instance Monad (Either e) -- Defined in ‘Data.Either’
    instance Monad []
    instance Monad Maybe
    instance Monad IO
    instance Monad ((->) r)
    instance Monoid a => Monad ((,) a)



·∾ :doc (>>=)

    Sequentially compose two actions, passing
    any value produced by the first as an
    argument to the second.

·∾ :type (>>=)
(>>=) :: Monad m => m a -> (a -> m b) -> m b

·∾ :info (>>=)
class Applicative m => Monad (m :: * -> *) where
  (>>=) :: m a -> (a -> m b) -> m b
  ...
infixl 1 >>=



·∾ :doc (>>)

    Sequentially compose two actions,
    discarding any value produced by the
    first, like sequencing operators (such as
    the semicolon) in imperative languages.

·∾ :type (>>)
(>>) :: Monad m => m a -> m b -> m b

·∾ :info (>>)
class Applicative m => Monad (m :: * -> *) where
  ...
  (>>) :: m a -> m b -> m b
  ...
infixl 1 >>



·∾ :doc return

    Inject a value into the monadic type.

·∾ :type return
return :: Monad m => a -> m a

·∾ :info return
class Applicative m => Monad (m :: * -> *) where
  ...
  return :: a -> m a
  ...



·∾ :doc join

    The join function is the conventional
    monad join operator. It is used to
    remove one level of monadic structure,
    projecting its bound argument into the
    outer level.

    Examples

    A common use of join is to run an IO
    computation returned from an GHC.Conc.STM
    transaction, since GHC.Conc.STM
    transactions cant perform IO directly.

    Recall that

      GHC.Conc.atomically :: STM a -> IO a

    is used to run GHC.Conc.STM transactions
    atomically. So, by specializing the
    types of GHC.Conc.atomically and join to

      GHC.Conc.atomically ::
        STM (IO b) -> IO (IO b)

      join ::
         IO (IO b) -> IO b

    we can compose them as

      join . GHC.Conc.atomically ::
        STM (IO b) -> IO b

    to run a GHC.Conc.STM transaction and
    the IO action it returns.

·∾ :type join
join :: Monad m => m (m a) -> m a



·∾ -- Monad's join operation is, in a sense,
·∾ -- a generalization of concat!

·∾ :set -XTypeApplications

·∾ :type join @[]
join @[] :: [[a]] -> [a]

·∾ :type concat @[]
concat @[] :: [[a]] -> [a]




·∾ :browse Control.Monad

Control.Monad.(<$!>)        ::  Monad m => (a -> b) -> m a -> m b
              (<=<)         ::  Monad m => (b -> m c) -> (a -> m b) -> a -> m c
              (>=>)         ::  Monad m => (a -> m b) -> (b -> m c) -> a -> m c
              filterM       ::  Applicative m => (a -> m Bool) -> [a] -> m [a]
              foldM         ::  (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m b
              foldM_        ::  (Foldable t, Monad m) => (b -> a -> m b) -> b -> t a -> m ()
              forever       ::  Applicative f => f a -> f b
              guard         ::  Alternative f => Bool -> f ()
              mapAndUnzipM  ::  Applicative m => (a -> m (b, c)) -> [a] -> m ([b], [c])
              mfilter       ::  GHC.Base.MonadPlus m => (a -> Bool) -> m a -> m a
              replicateM    ::  Applicative m => Int -> m a -> m [a]
              replicateM_   ::  Applicative m => Int -> m a -> m ()
              unless        ::  Applicative f => Bool -> f () -> f ()
              zipWithM      ::  Applicative m => (a -> b -> m c) -> [a] -> [b] -> m [c]
              zipWithM_     ::  Applicative m => (a -> b -> m c) -> [a] -> [b] -> m ()
(=<<)                       ::  Monad m => (a -> m b) -> m a -> m b


class Functor (f :: * -> *) where
  fmap :: (a -> b) -> f a -> f b
  (<$) :: a -> f b -> f a
  {-# MINIMAL fmap #-}


class Applicative m => Monad (m :: * -> *) where
  (>>=) :: m a -> (a -> m b) -> m b
  (>>) :: m a -> m b -> m b
  return :: a -> m a
  {-# MINIMAL (>>=) #-}


class Monad m => MonadFail (m :: * -> *) where
  fail :: String -> m a
  {-# MINIMAL fail #-}


class (Alternative m, Monad m) => GHC.Base.MonadPlus (m :: * -> *) where
  GHC.Base.mzero :: m a
  GHC.Base.mplus :: m a -> m a -> m a


GHC.Base.ap            ::  Monad m => m (a -> b) -> m a -> m b
Data.Traversable.forM  ::  (Traversable t, Monad m) => t a -> (a -> m b) -> m (t b)
Data.Foldable.forM_    ::  (Foldable t, Monad m) => t a -> (a -> m b) -> m ()
GHC.Base.join          ::  Monad m => m (m a) -> m a
         liftM         ::  Monad m => (a1 -> r) -> m a1 -> m r
         liftM2        ::  Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
         liftM3        ::  Monad m => (a1 -> a2 -> a3 -> r) -> m a1 -> m a2 -> m a3 -> m r
         liftM4        ::  Monad m => (a1 -> a2 -> a3 -> a4 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m r
         liftM5        ::  Monad m => (a1 -> a2 -> a3 -> a4 -> a5 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m a5 -> m r


class (Functor t, Foldable t) => Traversable (t :: * -> *) where
  ...
  mapM :: Monad m => (a -> m b) -> t a -> m (t b)
  ...


mapM_                ::  (Foldable t, Monad m) => (a -> m b) -> t a -> m ()
Data.Foldable.msum   ::  (Foldable t, GHC.Base.MonadPlus m) => t (m a) -> m a


class (Functor t, Foldable t) => Traversable (t :: * -> *) where
  ...
  sequence :: Monad m => t (m a) -> m (t a)


sequence_          ::  (Foldable t, Monad m) => t (m a) -> m ()
Data.Functor.void  ::  Functor f => f a -> f ()
GHC.Base.when      ::  Applicative f => Bool -> f () -> f ()



·∾ import Control.Monad.Fail

·∾ :doc fail
<has no documentation>

·∾ :type fail
fail :: MonadFail m => String -> m a

·∾ :info fail

    class Monad m => MonadFail (m :: * -> *) where
      fail :: String -> m a       -- Defined in ‘Control.Monad.Fail’



·∾ :doc MonadFail

    When a value is bound in do-notation,
    the pattern on the left hand side of <-
    might not match. In this case, this
    class provides a function to recover.

    A Monad without a MonadFail instance may
    only be used in conjunction with pattern
    that always match, such as newtypes,
    tuples, data types with only a single
    data constructor, and irrefutable
    patterns (~pat).

    Instances of MonadFail should satisfy
    the following law: fails shoud be a
    left zero for Control.Monad.>>=,

    fail s >>= f  =  fail s

    If your Monad is also
    Control.Monad.MonadPlus, a popular
    definition is

    fail _ = mzero

·∾ :info MonadFail

    class Monad m => MonadFail (m :: * -> *) where
      fail :: String -> m a
      {-# MINIMAL fail #-}       -- Defined in ‘Control.Monad.Fail’

      instance MonadFail []      -- Defined in ‘Control.Monad.Fail’
      instance MonadFail Maybe   -- Defined in ‘Control.Monad.Fail’
      instance MonadFail IO      -- Defined in ‘Control.Monad.Fail’
