·∾ --  Interchange Law:
·∾ --
·∾ --    u <*> pure y  =  pure ($ y) <*> u
·∾ --
·∾ --  The name u represents a function embedded in
·∾ --  some (applicative) structure.

·∾ (Just (+2)) <*> pure 2
Just 4

·∾ -- The terms ($ 2) and (\f -> f 2)  are the same.

·∾ pure ($ 2) <*> (Just (+2))
Just 4

·∾ pure (\f -> f 2) <*> (Just (+2))
Just 4


·∾ -- page 719
·∾ :{
 ⋮ mPure :: a -> Maybe a
 ⋮ mPure = pure
 ⋮
 ⋮ embed :: Num a => Maybe ((a -> b) -> b)
 ⋮ embed = mPure ($ 2)
 ⋮
 ⋮ mApply :: Maybe ((a -> b) -> b) -> Maybe (a -> b) -> Maybe b
 ⋮ mApply = (<*>)
 ⋮
 ⋮ myResult = pure ($ 2) `mApply` (Just (+2))
 ⋮ :}

·∾ myResult
Just 4


·∾ --
·∾ --
·∾ -- (<*>)       :: Applicative f =>
·∾ --                f (x -> y)
·∾ --             -> f x
·∾ --             -> f y
·∾ --
·∾ --          f   ~   Maybe
·∾ --          x   ~  (a -> b)
·∾ --          y   ~   b
·∾ --    (x -> y)  ~  (a -> b) -> b
·∾ --
·∾ -- mApply      ::
·∾ --                Maybe ((a -> b) -> b)
·∾ --             -> Maybe (a -> b)
·∾ --             -> Maybe b
·∾ --


·∾ -- According to the interchange law, this should be true:

·∾ (Just (+2) <*> pure 2) == (pure ($ 2) <*> Just (+2))
True


·∾ -- Here are some more examples for you to try out...

·∾ [(+1),(*2)] <*> pure 1
[2,2]

·∾ pure ($ 1) <*> [(+1),(*2)]
[2,2]

·∾ (Just (+3)) <*> pure 1
Just 4

·∾ pure ($ 1) <*> (Just (+3))
Just 4
