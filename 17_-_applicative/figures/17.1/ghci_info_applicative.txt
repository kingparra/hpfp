·∾ :info Applicative


class Functor f => Applicative (f :: * -> *) where

  pure              :: a -> f a

  (<*>)             :: f (a -> b) -> f a -> f b

  GHC.Base.liftA2   :: (a -> b -> c) -> f a -> f b -> f c

  (*>)              :: f a -> f b -> f b

  (<*)              :: f a -> f b -> f a

  {-# MINIMAL pure, ((<*>) | liftA2) #-}


instance Applicative             (Either e)
  --  Defined in Data.Either
instance Applicative             []
instance Applicative             Maybe
instance Applicative             IO
instance Applicative             ((->) a)
instance Monoid a => Applicative ((,) a)
