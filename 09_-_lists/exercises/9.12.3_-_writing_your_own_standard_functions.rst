9.12.3 Writing your own standard functions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Below are the outlines of some standard
functions. The goal here is to write your
own versions of these to gain a deeper
understanding of recursion over lists and how
to make functions flexible enough to accept a
variety of inputs. You could figure out how
to look up the answers, but you won't do
that, because you know you'd only be cheating
yourself out of the knowledge. Right?

Let's look at an example of what we're after
here.  The ``and`` function takes a list of
``Bool`` values and returns ``True`` if and
only if no values in the list are ``False.``
Here's how you might write your own version
of it:

::

  -- direct recursion, not using (&&)
  myAnd :: [Bool] -> Bool
  myAnd [] = True
  myAnd (x:xs) =
    if    x == False
    then  False
    else  myAnd xs


  -- direct recursion, using (&&)
  myAnd :: [Bool] -> Bool
  myAnd [] = True
  myAnd (x:xs) = x && myAnd xs

And now the fun begins:

1. ``myOr`` returns ``True`` if any ``Bool``
   in the list is ``True``::

     myOr :: [Bool] -> Bool
     myOr = undefined

2. ``myAny`` returns ``True`` if ``a -> Bool``
   applied to any of the values in the list
   returns ``True``::

     myAny :: (a -> Bool) -> [a] -> Bool
     myAny = undefined

   Example for validating ``myAny``::

     Prelude> myAny even [1, 3, 5]
     False

     Prelude> myAny odd [1, 3, 5]
     True

3. After you write the recursive ``myElem``,
   write another version that uses ``any``.
   The built-in version of ``elem`` in GHC
   7.10 and newer has a type that uses
   ``Foldable`` instead of the list type,
   specifically.

   You can ignore that and write the concrete
   version that works only for lists:

   ::

     myElem :: Eq a => a -> [a] -> Bool

   Here's an example of ``myElem``'s use in
   GHCi:

   ::

     Prelude> myElem 1 [1..10]
     True

     Prelude> myElem 1 [2..10]
     False

4. Implement ``myReverse``:

   Function stub::

     myReverse :: [a] -> [a]
     myReverse = undefined

   Example use::

     Prelude> myReverse "blah"
     "halb"

     Prelude> myReverse [1..5]
     [5,4,3,2,1]

5. ``squish`` flattens a list of lists into a
   list::

     squish :: [[a]] -> [a]
     squish = undefined

6. ``squishMap`` maps a function over a list
   and concatenates the results.

   Function stub::

     squishMap :: (a -> [b]) -> [a] -> [b]
     squishMap = undefined

   Demonstration of use in GHCi::

     Prelude> squishMap (\x -> [1, x, 3]) [2]
     [1,2,3]
     Prelude> squishMap (\x -> "WO "++[x]++" HOO ") "123"
     "WO 1 HOO WO 2 HOO WO 3 HOO "

7. ``squishAgain`` flattens a list of lists
   into a list.  This time, re-use the
   ``squishMap`` function::

     squishAgain :: [[a]] -> [a]
     squishAgain = undefined

8. ``myMaximumBy`` takes a comparison
   function and a list and returns the
   greatest element of the list based on the
   last value that the comparison returns
   ``GT`` for. If you import ``maximumBy``
   from ``Data.List``, you'll see that the
   type is::

     Foldable t => (a -> a -> Ordering) -> t a -> a

   Rather than::

     (a -> a -> Ordering) -> [a] -> a

   Here is your starting point::

     myMaximumBy :: (a -> a -> Ordering) -> [a] -> a
     myMaximumBy = undefined

   Demonstration::

     Prelude> xs = [1, 53, 9001, 10]
     Prelude> myMaximumBy compare xs
     9001

9. ``myMinimumBy`` takes a comparison
   function and a list and returns the least
   element of the list based on the last
   value that the comparison returns ``LT``
   for.

   Function stub::

     myMinimumBy :: (a -> a -> Ordering) -> [a] -> a
     myMinimumBy = undefined

   Demonstration::

     Prelude> xs = [1, 53, 9001, 10]
     Prelude> myMinimumBy compare xs
     1

10. Using the ``myMinimumBy`` and
    ``myMaximumBy`` functions, write your 
    own versions of maximum and minimum. 
    If you have GHC 7.10 or newer, you'll 
    see a type constructor that wants a 
    ``Foldable`` instance instead of a list,
    as has been the case for many functions
    so far::

      myMaximum :: (Ord a) => [a] -> a
      myMaximum = undefined

      myMinimum :: (Ord a) => [a] -> a
      myMinimum = undefined
