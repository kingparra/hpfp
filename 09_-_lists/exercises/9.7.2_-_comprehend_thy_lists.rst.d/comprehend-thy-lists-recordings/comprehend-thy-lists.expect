#!/usr/bin/env expect
log_user 0
# Launch GHCi with nothing in scope.
# -v0 supresses the "loading modules ..." message
spawn stack exec -- ghci -v0
log_user 1
# Use this with send -h to simulate a typing effect
set send_human {.1 .3 1 .05 2}


# Intro
expect "·∾ "; send -- "-- 9.7.2 Exercises: Comprehend thy lists\n"
expect "·∾ "; send -- "-- --------------------------------------\n"
expect "·∾ "; send -- "\n"
expect "·∾ "; send -- "-- Take a look at the following list\n"
expect "·∾ "; send -- "-- comprehensions and determine what the\n"
expect "·∾ "; send -- "-- evaluated list will look like, and then\n"
expect "·∾ "; send -- "-- test your conclusion by evaluating the\n"
expect "·∾ "; send -- "-- list comprehension in in ghci.\n"
expect "·∾ "; send -- "\n"
expect "·∾ "; send -- "\n"


# Setup
expect "·∾ "; send -- "-- First, we'll need this in scope.\n"
expect "·∾ "; send -- "mySqr = \[ x^2 | x <- \[1..10\]\]\n"
expect "·∾ "; send -- "\n"
expect "·∾ "; send -- "mySqr\n"
#expect "\[1,4,9,16,25,36,49,64,81,100\]\r\n"
expect "·∾ "; send -- "\n"
expect "·∾ "; send -- "\n"


# Question 1
expect "·∾ "; send -- "-- Question 1\n"
expect "·∾ "; send -- "one = \[ x | x <- mySqr, x `rem` 2 == 0 \]\n"
expect "·∾ "; send -- "\n"
expect "·∾ "; send -- "-- This filters for even numbers\n"
expect "·∾ "; send -- "-- in mySqr. Let me write it out by\n"
expect "·∾ "; send -- "-- hand to see if it matches.\n"
expect "·∾ "; send -- "\n"
expect "·∾ "; send -- "\[4,16,36,64,100\] == filter even mySqr\n"
expect "True\r\n"
expect "·∾ "; send -- " \n"
expect "·∾ "; send -- "one == filter even mySqr\n"
expect "True\r\n"
expect "·∾ "; send -- " \n"
expect "·∾ "; send -- "\[4,16,36,64,100\] == one\n"
expect "True\r\n"
expect "·∾ "; send -- " \n"
expect "·∾ "; send -- " \n"


# Question 2
expect "·∾ "; send -- "-- Question 2\n"
expect "·∾ "; send -- "one = \[ (x,y) | x <- mySqr, y <- mySqr, x < 50, y > 50\]\n"
expect "·∾ "; send -- ":{\n"
expect " ⋮ "; send -- "two = \[ (x,y)\n"
expect " ⋮ "; send -- "      | x <- mySqr\n"
expect " ⋮ "; send -- "      , y <- mySqr\n"
expect " ⋮ "; send -- "      , x < 50\n"
expect " ⋮ "; send -- "      , y > 50\n"
expect " ⋮ "; send -- "      \]\n"
expect " ⋮ "; send -- ":}\n"
expect "·∾ "; send -- "\n"
expect "·∾ "; send -- "-- This list comprehension does a few things.\n"
expect "·∾ "; send -- "-- First it generates x y pairs. The y is the\n"
expect "·∾ "; send -- "-- inner loop, if you will, so for each x it\n"
expect "·∾ "; send -- "-- is paired with every value of y first. Then\n"
expect "·∾ "; send -- "-- then next x is paired with every value of y.\n"
expect "·∾ "; send -- "-- ... you get the idea. Here it is graphically\n"
expect "·∾ "; send -- "\[ (x,y) | x <- mySqr, y <- mySqr \] == \[\n"
expect " ⋮ "; send -- "  (1  ,1) , (1  ,4) , (1  ,9) , (1  ,16) , (1  ,25) , (1  ,36) , (1  ,49) , (1  ,64) , (1  ,81) , (1  ,100)\n"
expect " ⋮ "; send -- ", (4  ,1) , (4  ,4) , (4  ,9) , (4  ,16) , (4  ,25) , (4  ,36) , (4  ,49) , (4  ,64) , (4  ,81) , (4  ,100)\n"
expect " ⋮ "; send -- ", (9  ,1) , (9  ,4) , (9  ,9) , (9  ,16) , (9  ,25) , (9  ,36) , (9  ,49) , (9  ,64) , (9  ,81) , (9  ,100)\n"
expect " ⋮ "; send -- ", (16 ,1) , (16 ,4) , (16 ,9) , (16 ,16) , (16 ,25) , (16 ,36) , (16 ,49) , (16 ,64) , (16 ,81) , (16 ,100)\n"
expect " ⋮ "; send -- ", (25 ,1) , (25 ,4) , (25 ,9) , (25 ,16) , (25 ,25) , (25 ,36) , (25 ,49) , (25 ,64) , (25 ,81) , (25 ,100)\n"
expect " ⋮ "; send -- ", (36 ,1) , (36 ,4) , (36 ,9) , (36 ,16) , (36 ,25) , (36 ,36) , (36 ,49) , (36 ,64) , (36 ,81) , (36 ,100)\n"
expect " ⋮ "; send -- ", (49 ,1) , (49,4)  , (49 ,9) , (49 ,16) , (49 ,25) , (49 ,36) , (49 ,49) , (49 ,64) , (49 ,81) , (49 ,100)\n"
expect " ⋮ "; send -- ", (64 ,1) , (64 ,4) , (64 ,9) , (64 ,16) , (64 ,25) , (64 ,36) , (64 ,49) , (64 ,64) , (64 ,81) , (64 ,100)\n"
expect " ⋮ "; send -- ", (81 ,1) , (81 ,4) , (81 ,9) , (81 ,16) , (81 ,25) , (81 ,36) , (81 ,49) , (81 ,64) , (81 ,81) , (81 ,100)\n"
expect " ⋮ "; send -- ", (100,1) , (100,4) , (100,9) , (100,16) , (100,25) , (100,36) , (100,49) , (100,64) , (100,81) , (100,100)\n"
expect " ⋮ "; send -- "\]\n"
expect "True"
expect "·∾ "; send -- "-- Now here is that output modified in vim so values that don't meet.\n"
expect "·∾ "; send -- "-- the two filters are commented out.\n"
expect "·∾ "; send -- ":{\n"
expect " ⋮ "; send -- "twoGuess = \n"
expect " ⋮ "; send -- "  \[\n"
expect " ⋮ "; send -- "  {-   (1  ,1) , (1  ,4) , (1  ,9) , (1  ,16) , (1  ,25) , (1  ,36) , (1  ,49) , -}  (1  ,64) , (1  ,81) , (1  ,100)\n"
expect " ⋮ "; send -- "  {- , (4  ,1) , (4  ,4) , (4  ,9) , (4  ,16) , (4  ,25) , (4  ,36) , (4  ,49) -}  , (4  ,64) , (4  ,81) , (4  ,100)\n"
expect " ⋮ "; send -- "  {- , (9  ,1) , (9  ,4) , (9  ,9) , (9  ,16) , (9  ,25) , (9  ,36) , (9  ,49) -}  , (9  ,64) , (9  ,81) , (9  ,100)\n"
expect " ⋮ "; send -- "  {- , (16 ,1) , (16 ,4) , (16 ,9) , (16 ,16) , (16 ,25) , (16 ,36) , (16 ,49) -}  , (16 ,64) , (16 ,81) , (16 ,100)\n"
expect " ⋮ "; send -- "  {- , (25 ,1) , (25 ,4) , (25 ,9) , (25 ,16) , (25 ,25) , (25 ,36) , (25 ,49) -}  , (25 ,64) , (25 ,81) , (25 ,100)\n"
expect " ⋮ "; send -- "  {- , (36 ,1) , (36 ,4) , (36 ,9) , (36 ,16) , (36 ,25) , (36 ,36) , (36 ,49) -}  , (36 ,64) , (36 ,81) , (36 ,100)\n"
expect " ⋮ "; send -- "  {- , (49 ,1) , (49 ,4) , (49 ,9) , (49 ,16) , (49 ,25) , (49 ,36) , (49 ,49) -}  , (49 ,64) , (49 ,81) , (49 ,100)\n"
expect " ⋮ "; send -- "  {- , (64 ,1) , (64 ,4) , (64 ,9) , (64 ,16) , (64 ,25) , (64 ,36) , (64 ,49)     , (64 ,64) , (64 ,81) , (64 ,100) -}\n"
expect " ⋮ "; send -- "  {- , (81 ,1) , (81 ,4) , (81 ,9) , (81 ,16) , (81 ,25) , (81 ,36) , (81 ,49)     , (81 ,64) , (81 ,81) , (81 ,100) -}\n"
expect " ⋮ "; send -- "  {- , (100,1) , (100,4) , (100,9) , (100,16) , (100,25) , (100,36) , (100,49)     , (100,64) , (100,81) , (100,100) -}\n"
expect " ⋮ "; send -- "  \]\n"
expect " ⋮ "; send -- ":}\n"
expect "·∾ "; send -- " \n"
expect "·∾ "; send -- "-- Now let's see if my manual filtering reflects the correct value of two.\n"
expect "·∾ "; send -- "twoGuess == two\n"
expect "True\r\n"
expect "·∾ "; send -- "-- Phew, that was a lot of typing. Now for question 3.\n"
expect "·∾ "; send -- " \n"
expect "·∾ "; send -- " \n"


# Question 3
expect "·∾ "; send -- "-- Question 3\n"
expect "·∾ "; send -- "three = take 5 \[(x,y) | x <- mySqr, y <- mySqr, x < 50, y > 50\]\n"
expect "·∾ "; send -- " \n"
expect "·∾ "; send -- "-- This is just the first five elements of the last list.\n"
expect "·∾ "; send -- "three == take 5 two\n"
expect "True\r\n"
expect "·∾ "; send -- "-- I'll do the filtering manually, and bind it to threeGuess\n"
expect "·∾ "; send -- "threeGuess = \[(1,64), (1,81), (1,100), (4,64), (4,81)\]\n"
expect "·∾ "; send -- " \n"
expect "·∾ "; send -- "-- Is my guess the same as the value of three?\n"
expect "·∾ "; send -- "threeGuess == three\n"
expect "True\r\n"
expect "·∾ "; send -- " \n"
expect "·∾ "; send -- " \n"
