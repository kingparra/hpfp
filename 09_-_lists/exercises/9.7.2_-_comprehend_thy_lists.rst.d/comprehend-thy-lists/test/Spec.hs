import Test.Hspec
import Lib

main = hspec $ do

  describe "Question 1" $ do
    it "will filter for even numbers in mySqr" $ do
      one `shouldBe` filter even mySqr
    it "will equal [4,16,36,64,100]" $ do
      one `shouldBe` [4,16,36,64,100]

  describe "Question 2" $ do
    it "will generate x y pairs" $ do
      [ (x,y) | x <- mySqr, y <- mySqr ] == [
          (1  ,1) , (1  ,4) , (1  ,9) , (1  ,16) , (1  ,25) , (1  ,36) , (1  ,49) , (1  ,64) , (1  ,81) , (1  ,100)
        , (4  ,1) , (4  ,4) , (4  ,9) , (4  ,16) , (4  ,25) , (4  ,36) , (4  ,49) , (4  ,64) , (4  ,81) , (4  ,100)
        , (9  ,1) , (9  ,4) , (9  ,9) , (9  ,16) , (9  ,25) , (9  ,36) , (9  ,49) , (9  ,64) , (9  ,81) , (9  ,100)
        , (16 ,1) , (16 ,4) , (16 ,9) , (16 ,16) , (16 ,25) , (16 ,36) , (16 ,49) , (16 ,64) , (16 ,81) , (16 ,100)
        , (25 ,1) , (25 ,4) , (25 ,9) , (25 ,16) , (25 ,25) , (25 ,36) , (25 ,49) , (25 ,64) , (25 ,81) , (25 ,100)
        , (36 ,1) , (36 ,4) , (36 ,9) , (36 ,16) , (36 ,25) , (36 ,36) , (36 ,49) , (36 ,64) , (36 ,81) , (36 ,100)
        , (49 ,1) , (49,4)  , (49 ,9) , (49 ,16) , (49 ,25) , (49 ,36) , (49 ,49) , (49 ,64) , (49 ,81) , (49 ,100)
        , (64 ,1) , (64 ,4) , (64 ,9) , (64 ,16) , (64 ,25) , (64 ,36) , (64 ,49) , (64 ,64) , (64 ,81) , (64 ,100)
        , (81 ,1) , (81 ,4) , (81 ,9) , (81 ,16) , (81 ,25) , (81 ,36) , (81 ,49) , (81 ,64) , (81 ,81) , (81 ,100)
        , (100,1) , (100,4) , (100,9) , (100,16) , (100,25) , (100,36) , (100,49) , (100,64) , (100,81) , (100,100)
        ]
    it "will filter the pairs on ((<50),_) and (_,(>50))" $ do
      two `shouldBe` [
        {-   (1  ,1) , (1  ,4) , (1  ,9) , (1  ,16) , (1  ,25) , (1  ,36) , (1  ,49) , -}  (1  ,64) , (1  ,81) , (1  ,100)
        {- , (4  ,1) , (4  ,4) , (4  ,9) , (4  ,16) , (4  ,25) , (4  ,36) , (4  ,49) -}  , (4  ,64) , (4  ,81) , (4  ,100)
        {- , (9  ,1) , (9  ,4) , (9  ,9) , (9  ,16) , (9  ,25) , (9  ,36) , (9  ,49) -}  , (9  ,64) , (9  ,81) , (9  ,100)
        {- , (16 ,1) , (16 ,4) , (16 ,9) , (16 ,16) , (16 ,25) , (16 ,36) , (16 ,49) -}  , (16 ,64) , (16 ,81) , (16 ,100)
        {- , (25 ,1) , (25 ,4) , (25 ,9) , (25 ,16) , (25 ,25) , (25 ,36) , (25 ,49) -}  , (25 ,64) , (25 ,81) , (25 ,100)
        {- , (36 ,1) , (36 ,4) , (36 ,9) , (36 ,16) , (36 ,25) , (36 ,36) , (36 ,49) -}  , (36 ,64) , (36 ,81) , (36 ,100)
        {- , (49 ,1) , (49 ,4) , (49 ,9) , (49 ,16) , (49 ,25) , (49 ,36) , (49 ,49) -}  , (49 ,64) , (49 ,81) , (49 ,100)
        {- , (64 ,1) , (64 ,4) , (64 ,9) , (64 ,16) , (64 ,25) , (64 ,36) , (64 ,49)     , (64 ,64) , (64 ,81) , (64 ,100) -}
        {- , (81 ,1) , (81 ,4) , (81 ,9) , (81 ,16) , (81 ,25) , (81 ,36) , (81 ,49)     , (81 ,64) , (81 ,81) , (81 ,100) -}
        {- , (100,1) , (100,4) , (100,9) , (100,16) , (100,25) , (100,36) , (100,49)     , (100,64) , (100,81) , (100,100) -}
        ]

  describe "Question 2" $ do
    it "will take the first five elements of two" $ do
      three `shouldBe` take 5 two
    it "will evaluate to [(1,64),(1,81),(1,100)(4,64),(4,81)]" $ do
      three `shouldBe` [(1,64),(1,81),(1,100),(4,64),(4,81)]
