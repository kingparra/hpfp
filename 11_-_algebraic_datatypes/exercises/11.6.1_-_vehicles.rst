11.6.1 Exercises: Vehicles
^^^^^^^^^^^^^^^^^^^^^^^^^^
Given the following code:

.. include:: exercises/11.6.1_-_vehicles.rst.d/vehicles/src/Types.hs
   :code:
   :end-before: -- question 5

1. What is the type of ``myCar``?

   The ``Car`` data constructor belongs to the ``Vehicle`` type, so it must be
   ``Vehicle``::

     ·∾ :type myCar
     myCar :: Vehicle

2. Given the following, define the functions

   ::

     isCar :: Vehicle -> Bool
     isCar = undefined

     isPlane :: Vehicle -> Bool
     isPlane = undefined

     areCars :: [Vehicle] -> [Bool]
     areCars = undefined

   Ok, here is my attempt:

   .. include:: exercises/11.6.1_-_vehicles.rst.d/vehicles/src/Funcs.hs
      :code:
      :end-before: getManu

3. Now we're going to write a function to tell us the manufacturer
   of a piece of data::

     getManu :: Vehicle -> Manufacturer
     getManu = undefined

   Here is my implementation...

   .. include:: exercises/11.6.1_-_vehicles.rst.d/vehicles/src/Funcs.hs
      :code:
      :start-after: areCars = map isCar
      :end-before: -- question 5

4. Given that we're returning the ``Manufacturer``, what will happen if
   you use this on ``Plane`` data?

   You'll get bottom, which will throw an exception like ``Non-exhaustive
   patterns in function``. Since I've defined an error for this, you'll
   get a different message.

5. All right. Let's say you've decided to add the size of the plane as an
   argument to the ``Plane`` constructor. Add that to your datatypes in the
   appropriate places and change your data and functions appropriately.

   .. include:: exercises/11.6.1_-_vehicles.rst.d/vehicles/src/Types.hs
      :code:
      :start-after: -- question 5

   .. include:: exercises/11.6.1_-_vehicles.rst.d/vehicles/src/Funcs.hs
      :code:
      :start-after: -- question 5
