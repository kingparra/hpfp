10.10.2 Rewriting functions using folds
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
In the previous chapter, you wrote these functions using
direct recursion over lists. The goal now is to rewrite them
using folds. Where possible, to gain a deeper understanding
of folding, try rewriting the fold version so that it is
point-free.

Point-free versions of these functions written with a fold
should look like this:

::

  myFunc = foldr f z

So, for example, with the and function:

::

  -- direct recursion, not using &&
  myAnd :: [Bool] -> Bool
  myAnd [] = True
  myAnd (x:xs) =
    if x == False
    then False
    else myAnd xs

  -- direct recursion, using &&
  myAnd :: [Bool] -> Bool
  myAnd [] = True
  myAnd (x:xs) = x && myAnd xs

  -- fold, not point-free
  myAnd :: [Bool] -> Bool
  myAnd = foldr
    (\a b ->
      if a == False
      then False
      else b) True

  -- fold, both myAnd and the folding
  -- function are point-free now
  myAnd :: [Bool] -> Bool
  myAnd = foldr (&&) True

The goal here is to converge on the final version where possible.

You don't need to write all variations for each example, but
the more variations you write, the deeper your understanding
of these functions will become.

1. ``myOr`` returns True if any Bool in the list is True:

   ::

     myOr :: [Bool] -> Bool
     myOr = undefined

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 1
      :end-before: -- Question 2

2. ``myAny`` returns ``True`` if ``a -> Bool`` applied to
   any of the values in the list returns ``True``:

   ::

     myAny :: (a -> Bool) -> [a] -> Bool
     myAny = undefined

   Example for validating ``myAny``:

   ::

     Prelude> myAny even [1, 3, 5]
     False
     Prelude> myAny odd [1, 3, 5]
     True

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 2
      :end-before: -- Question 3

3. Write two versions of ``myElem``. One version should use
   folding and the other should use ``any``:

   ::

     myElem :: Eq a => a -> [a] -> Bool

     Prelude> myElem 1 [1..10]
     True
     Prelude> myElem 1 [2..10]
     False


   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 3
      :end-before: -- Question 4

4. Implement ``myReverse``. Don't worry about trying to make
   it lazy:

   ::

     myReverse :: [a] -> [a]
     myReverse = undefined

     Prelude> myReverse "blah"
     "halb"
     Prelude> myReverse [1..5]
     [5,4,3,2,1]

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 4
      :end-before: -- Question 5

5. Write ``myMap`` in terms of ``foldr``. It should have the
   same behavior as the built-in ``map``:

   ::

     myMap :: (a -> b) -> [a] -> [b]
     myMap = undefined

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 5
      :end-before: -- Question 6

6. Write ``myFilter`` in terms of ``foldr``. It should have the
   same behavior as the built-in ``filter``:

   ::

     myFilter :: (a -> Bool) -> [a] -> [a]
     myFilter = undefined

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 6
      :end-before: -- Question 7

7. ``squish`` flattens a list of lists into a list:

   ::

     squish :: [[a]] -> [a]
     squish = undefined

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 7
      :end-before: -- Question 8

8. ``squishMap`` maps a function over a list and concatenates the result:

   ::

     squishMap :: (a -> [b]) -> [a] -> [b]
     squishMap = undefined

     Prelude> squishMap (\x -> [1, x, 3]) [2]
     [1,2,3]

     Prelude> f x = "WO " ++ [x] ++ " OT "

     Prelude> squishMap f "blah"
     "WO b OT WO l OT WO a OT WO h OT "

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 8
      :end-before: -- Question 9

9. ``squishAgain`` flattens a list of lists into a list.
   This time, re-use the ``squishMap`` function:

   ::

      squishAgain :: [[a]] -> [a]
      squishAgain = undefined

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 9
      :end-before: -- Question 10

10. ``myMaximumBy`` takes a comparison function and a list
    and returns the greatest element of the list based on
    the last value that the comparison returns ``GT`` for:

    ::

      myMaximumBy :: (a -> a -> Ordering) -> [a] -> a
      myMaximumBy = undefined

      Prelude> myMaximumBy (\_ _ -> GT) [1..10]
      1
      Prelude> myMaximumBy (\_ _ -> LT) [1..10]
      10
      Prelude> myMaximumBy compare [1..10]
      10

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 10
      :end-before: -- Question 11

11. ``myMinimumBy`` takes a comparison function and a list
    and returns the least element of the list based on the
    last value that the comparison returns ``LT`` for:

    ::

      myMinimumBy :: (a -> a -> Ordering) -> [a] -> a
      myMinimumBy = undefined

      Prelude> myMinimumBy (\_ _ -> GT) [1..10]
      10
      Prelude> myMinimumBy (\_ _ -> LT) [1..10]
      1
      Prelude> myMinimumBy compare [1..10]
      1

   Here is my attempt:

   .. include:: exercises/10.10.2_-_rewriting_functions_using_folds.rst.d/rewrite-with-folds/src/Lib.hs
      :code:
      :start-after: -- Question 11
      :end-before: -- Question 12
