2. Write out the evaluation steps for ``foldl (flip (*)) 1 [1..3]``:

   |  foldl :: (b -> a -> b) -> b -> [a] -> b
   |  foldl f acc l =
   |    case l of
   |     [] -> acc
   |     (x:xs) -> foldl f (f acc x) xs
   |
   |  foldl (flip (*)) 1 [1,2,3] =
   |    case [1,2,3] of
   |     [] -> 1
   |     (1:[2,3]) ->
   |       foldl (flip (*)) **((flip (*)) acc 1)** [2,3] =
   |         case [2,3] of
   |           [] -> 1
   |           (2:[3]) ->
   |             foldl (flip (*)) **((flip (*)) ((flip (*)) acc 1) 2)** [3] =
   |               case [3] of
   |                 [] -> 1
   |                 (3:[]) ->
   |                     foldl (flip (*)) **((flip (*)) ((flip (*)) ((flip (*)) acc 1) 2) 3)** [] =
   |                       case [] of
   |                         [] -> **1**
   |

   The fully accumulated expression looks like this...


   **((flip (*)) ((flip (*)) ((flip (*)) 1 1) 2) 3)**

   If we write our function infix, the association is easier to see

   | let
   |   f = flip (*)
   | in
   |   ((((1 \`f` 1) \`f` 2) \`f` 3)

   We can reduce this to normal form, now, if we want...

   |     ((flip (*)) ((flip (*)) ((flip (*)) 1 1) 2) 3)
   |                    ((flip (*)) ((flip (*)) 1 2) 3)
   |                                   ((flip (*)) 2 3)
   |                                                 6
