6.14.2 Does it typecheck?
^^^^^^^^^^^^^^^^^^^^^^^^^
First, a terminal recording.

  .. raw:: html

      <script id="asciicast-7iJF2XzvIWsOuCS0LW8fmZJ36"
      src="https://asciinema.org/a/7iJF2XzvIWsOuCS0LW8fmZJ36.js"
      async></script>

1. Does the following code typecheck?

   .. include:: exercises/6.14.2_-_does_it_typecheck.rst.d/One.hs
      :code:

   If not, why not?

   My prediction is that this won't typecheck since ``Person`` doesn't have an
   instance of ``Show``. ::

     ·∾ :load One.hs
     [1 of 1] Compiling Main             ( One.hs, interpreted )

     One.hs:4:32: error:
         • No instance for (Show Person) arising from a use of ‘show’
         • In the first argument of ‘putStrLn’, namely ‘(show person)’
           In the expression: putStrLn (show person)
           In an equation for ‘printPerson’:
               printPerson person = putStrLn (show person)
       |
     4 | printPerson person = putStrLn (show person)
       |                                ^^^^^^^^^^^
     Failed, no modules loaded.

2. Does the following typecheck?

   .. include:: exercises/6.14.2_-_does_it_typecheck.rst.d/Two.hs
      :code:

   If not, why not?

   The settleDown function uses ``(==)`` within its definition
   but Mood doesn't have an instance of ``Eq``, so this shouldn't
   compile. ::

     ·∾ :load Two.hs
     [1 of 1] Compiling Main             ( Two.hs, interpreted )

     Two.hs:3:19: error:
         • No instance for (Eq Mood) arising from a use of ‘==’
         • In the expression: x == Woot
           In the expression: if x == Woot then Blah else x
           In an equation for ‘settleDown’:
               settleDown x = if x == Woot then Blah else x
       |
     3 | settleDown x = if x == Woot then Blah else x
       |                   ^^^^^^^^^
     Failed, no modules loaded.

3. If you were able to get ``settleDown`` to typecheck:


   So, I just added ``deriving Eq`` to ``Mood`` in the module Two, and saved it
   as ``TwoV2.hs``.

   .. include:: exercises/6.14.2_-_does_it_typecheck.rst.d/TwoV2.hs
      :code:

   Now it typechecks. ::

     ·∾ :load TwoV2.hs
     [1 of 1] Compiling Main             ( TwoV2.hs, interpreted )
     Ok, one module loaded.


  a) What values are acceptable inputs to that function?

     The acceptable inputs to ``settleDown`` are ``Blah`` or ``Woot`` (members
     of ``Mood``)::

       ·∾ settleDown Blah
       Blah
       ·∾ settleDown Woot
       Blah


  b) What will happen if you try to run ``settleDown 9``? Why?

     Running settleDown 9 should throw a type error... let's try it::

       ·∾ settleDown 9
       <interactive>:19:12: error:
           • No instance for (Num Mood) arising from the literal ‘9’
           • In the first argument of ‘settleDown’, namely ‘9’
             In the expression: settleDown 9
             In an equation for ‘it’: it = settleDown 9

  c) What will happen if you try to run ``Blah > Woot``? Why?

     Mood doesn't support ``Num``, and numeric literals are of type ``Num a => a`` by
     default, so unning ``Blah > Woot`` won't work, since ``(>)`` comes from Ord. ::

       ·∾ Blah > Woot
       <interactive>:23:1: error:
           • No instance for (Ord Mood) arising from a use of ‘>’
           • In the expression: Blah > Woot
             In an equation for ‘it’: it = Blah > Woot

     This means ``Mood`` would need to derive ``Ord`` for that to work. ::

       ·∾ data Mood = Blah | Woot deriving (Eq, Ord, Show)

     Now it works. ::

       ·∾ Blah > Woot
       False

       ·∾ Blah < Woot
       True


4. Does the following typecheck?

   .. include:: exercises/6.14.2_-_does_it_typecheck.rst.d/Four.hs
      :code:

   If not, why not?

   My guess was that it wouldn't type check since ``Sentence`` isn't fully
   applied in ``s1``, but I was wrong. It just returns a partially applied
   function! ::

     ·∾ :load Four.hs
     [1 of 1] Compiling Main             ( Four.hs, interpreted )
     Ok, one module loaded.

     ·∾ :type s1
     s1 :: Object -> Sentence

   That was a silly mistake.

   Of course if we try to use it, we can't show the resulting function::

     ·∾ s1
     <interactive>:36:1: error:
         • No instance for (Show (Object -> Sentence))
             arising from a use of ‘print’
             (maybe you haven't applied a function to enough arguments?)
         • In a stmt of an interactive GHCi command: print it
