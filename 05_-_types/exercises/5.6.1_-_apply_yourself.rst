5.6.1 Exercises: Apply Yourself
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Figure out how the type would change and why, make a note of
what you think the new inferred type would be and then check
your work in GHCi.

First, a terminal recording.

.. raw:: html

   <script id="asciicast-MvaGJQ1YR8OCgB2EVP8MCTHD9"
   src="https://asciinema.org/a/MvaGJQ1YR8OCgB2EVP8MCTHD9.js"
   async></script>

1. ::

      -- Type signature of general function
      (++) :: [a] -> [a] -> [a]

      -- How might that change when we apply
      -- it to the following value?
      myConcat x = x ++ " yo"

   ``myConcat :: String -> String`` is my guess::

      ·∾ :type myConcat
      myConcat :: [Char] -> [Char]

2. ::

      -- General function
      (*) :: Num a => a -> a -> a

      -- Applied to a value
      myMult x = (x / 3) * 5

    My guess is ``myMult :: (Fractional a) => a -> a``.
    Let's see::

      ·∾ :type myMult
      myMult :: Fractional a => a -> a

3. ::

      take :: Int -> [a] -> [a]
      myTake x = take x "hey you"


   Should be ``myTake :: Int -> String``, probably::

      ·∾ :type myTake
      myTake :: Int -> [Char]

4. ::

      (>) :: Ord a => a -> a -> Bool
      myCom x = x > (length [1..10])

   This must be ``Int -> Bool``, since ``length`` returns an
   ``Int``. Let's see::

      ·∾ :type myCom
      myCom :: Int -> Bool

5. ::

      (<) :: Ord a => a -> a -> Bool
      myAlph x = x < 'z'

   This one is straight-forward. Must be ``Char -> Bool``::

      ·∾ :type myAlph
      myAlph :: Char -> Bool
