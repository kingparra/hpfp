5.4.5 Exercises: Type Arguments
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
First, the terminal recording. I don't recommend you watch
this one, it needs editing. I only leave it here as proof of
work.

.. raw:: html

   <script id="asciicast-RUq5Gxezwomf1lTOiEbA9PyoG"
   src="https://asciinema.org/a/RUq5Gxezwomf1lTOiEbA9PyoG.js"
   async></script>

Given a function and its type, tell us what type results from
applying some or all of the arguments.

1. If the type of ``f`` is ``a -> a -> a -> a``, and the type of
   ``x`` is ``Char`` then the type of ``f x`` is

    a) **Char -> Char -> Char**::

        ·∾ f :: a -> a -> a -> a; f = undefined
        ·∾ x :: Char; x = undefined

        ·∾ -- f x should have type Char -> Char -> Char, I think.
        ·∾ -- Char specializes the a's. x consumes one argument,
        ·∾ -- reducing the number of type variables by one.

        ·∾ :type f x
        f x :: Char -> Char -> Char

    b) ``x -> x -> x -> x``
    c) ``a -> a -> a``
    d) ``a -> a -> a -> Char``

2. If the type of ``g`` is ``a -> b -> c -> b``, then the
   type of ``g 0 'c' "woot"`` is

    a) ``String``
    b) ``Char -> String``
    c) ``Int``
    d) **Char**::

        ·∾ g :: a -> b -> c -> b; g = undefined

        ·∾ -- g 0 'c' "woot"
        ·∾ -- a:: Num a => a , b :: Char; c :: String
        ·∾ -- ... since it returns b the type should be Char.

        ·∾ :type g 0 'c' "woot"
        g 0 'c' "woot" :: Char

3. If the type of ``h`` is ``(Num a, Num b) => a -> b ->
   b``, then the type of ``h 1.0 2`` is:

    a) ``Double``
    b) ``Integer``
    c) ``Integral b => b``
    d) **Num b => b**::

        ·∾ h :: (Num a, Num b) => a -> b -> b; h = undefined

        ·∾ -- h 1.0 2
        ·∾ -- a :: Num a => a; b :: Num b => b
        ·∾ -- ... should be Num

        ·∾ :type h 1.0 2
        h 1.0 2 :: Num b => b

4. If the type of ``h`` is ``(Num a, Num b) => a -> b ->
   b``, then the type of ``h 1 (5.5 :: Double)`` is

    a) ``Integer``
    b) ``Fractional b => b``
    c) **Double**::

        ·∾ h :: (Num a, Num b) => a -> b -> b; h = undefined

        ·∾ -- h 1 (5.5 :: Double)
        ·∾ -- a :: Num a => a; b :: Double
        ·∾ -- ... since it returns b, it should be Double

        ·∾ :type h 1 (5.5 :: Double)
        h 1 (5.5 :: Double) :: Double

    d) ``Num b => b````

5. If the type of ``jackal`` is ``(Ord a, Eq b) => a -> b -> a``,
   then the type of ``jackal "keyboard" "has the word jackal in it"``

    a) **[Char]**::

        ·∾ jackal :: (Ord a, Eq b) => a -> b -> a; jackal = undefined

        ·∾ -- jackal "keyboard" "has the word jackal in it"
        ·∾ -- a :: String; b :: String
        ·∾ -- ... should be String

        ·∾ :type jackal "keyboard" "has the word jackal in it"
        jackal "keyboard" "has the word jackal in it" :: [Char]

        ·∾ -- String is an alias for [Char], so this makes sense.

    b) ``Eq b => b``
    c) ``b -> [Char]``
    d) ``b``
    e) ``Eq b => b -> [Char]``

6. If the type of ``jackal`` is ``(Ord a, Eq b) => a -> b -> a``,
   then the type of ``jackal "keyboard"``

    a) ``b``
    b) ``Eq b => b``
    c) ``[Char]``
    d) **b -> [Char]**::

        ·∾ jackal :: (Ord a, Eq b) => a -> b -> a; jackal = undefined

        ·∾ -- jackal "keyboard"
        ·∾ -- a :: String; b
        ·∾ -- ... since a is returned, it should be String
        ·∾ -- ... or jackal :: b -> String , rather

        ·∾ :type jackal "keyboard"
        jackal "keyboard" :: Eq b => b -> [Char]

        ·∾ -- Right, I forgot about the Eq constraint.

    e) ``Eq b => b -> [Char]``

7. If the type of ``kessel`` is ``(Ord a, Num b) => a -> b -> a``,
   then the type of ``kessel 1 2 is``

    a) ``Integer``
    b) ``Int``
    c) ``a``
    d) **(Num a, Ord a) => a**::

          ·∾ kessel :: (Ord a, Num b) => a -> b -> a; kessel = undefined
          ·∾ -- kessel 1 (2 :: Integer)
          ·∾ -- a :: Ord a => a ; b :: Integer
          ·∾ -- ... should be Ord a => a

          ·∾ :type kessel 1 (2 :: Integer)
          kessel 1 (2 :: Integer) :: (Ord a, Num a) => a

          ·∾ -- Right, of course, since we pass a numeric
          ·∾ -- literal it adds the Num constraint.

    e) ``Ord a => a``
    f) ``Num a => a``

8. If the type of ``kessel`` is ``(Ord a, Num b) => a -> b -> a``,
   then the type of ``kessel 1 (2 :: Integer)`` is

    a) ``(Num a, Ord a) => a``
    b) ``Int``
    c) ``a``
    d) ``Num a => a``
    e) ``Ord a => a``
    f) **Integer**::

            ·∾ kessel :: (Ord a, Num b) => a -> b -> a; kessel = undefined

            ·∾ -- kessel (1 :: Integer) 2
            ·∾ -- a :: Integer; b :: Num b => b
            ·∾ -- The return type should be Integer.

            ·∾ :type kessel (1 :: Integer) 2
            kessel (1 :: Integer) 2 :: Integer

9. If the type of kessel is ``(Ord a, Num b) => a -> b -> a``, then
   the type of ``kessel (1 :: Integer) 2`` is

    a) ``Num a => a``
    b) ``Ord a => a``
    c) **Integer**::

            ·∾ kessel :: (Ord a, Num b) => a -> b -> a; kessel = undefined

            ·∾ -- kessel (1 :: Integer) 2
            ·∾ -- a :: Integer; b :: Num b => b
            ·∾ -- ... should be Integer

            ·∾ :type kessel (1 :: Integer) 2
            kessel (1 :: Integer) 2 :: Integer

    d) ``(Num a, Ord a) => a``
    e) ``a``
