·∾ import Data.Foldable

·∾ :info Foldable
class Foldable (t :: * -> *) where
  fold      :: Monoid m => t m -> m
  foldMap   :: Monoid m => (a -> m) -> t a -> m
  foldMap'  :: Monoid m => (a -> m) -> t a -> m
  foldr     :: (a -> b -> b) -> b -> t a -> b
  foldr'    :: (a -> b -> b) -> b -> t a -> b
  foldl     :: (b -> a -> b) -> b -> t a -> b
  foldl'    :: (b -> a -> b) -> b -> t a -> b
  foldr1    :: (a -> a -> a) -> t a -> a
  foldl1    :: (a -> a -> a) -> t a -> a
  toList    :: t a -> [a]
  null      :: t a -> Bool
  length    :: t a -> Int
  elem      :: Eq a => a -> t a -> Bool
  maximum   :: Ord a => t a -> a
  minimum   :: Ord a => t a -> a
  sum       :: Num a => t a -> a
  product   :: Num a => t a -> a
  {-# MINIMAL foldMap | foldr #-}

instance Foldable []
instance Foldable Maybe
instance Foldable (Either a)
instance Foldable ((,) a)
